#!/usr/bin/env python

#
#     Copyright 2007 Sebastian Heimann
#  
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#  
#         http://www.apache.org/licenses/LICENSE-2.0
#  
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
# 

import sys, os, subprocess, shutil, logging, tempfile, time, math, calendar
import numpy as num
import scipy.interpolate
import pymseed
from os.path import join as pjoin

pymseed.config.show_progress = False

class Programs:
    rdseed   = 'rdseed4.8'

def ensure_dir(d):
    if not os.path.isdir(d):
        if os.path.exists(d):
            sys.exit(d+' exists and is not a directory')
        os.mkdir( d )

def clean_dir(d):
    if os.path.isdir(d):
        shutil.rmtree(d)
    
    os.mkdir( d )

class Event:
    def __init__(self, lat, lon, time):
        self.lat = lat
        self.lon = lon
        self.time = time

class SeedVolumeAccess:

    def __init__(self, seedvolume):
        self.seedvolume = seedvolume
        self.tempdir = tempfile.mkdtemp("","SeedVolumeAccess-")
        self._pile = None
        self._unpack()
        self._event = None

    def __del__(self):
        import shutil
        shutil.rmtree(self.tempdir)

    def iter_raw_traces(self):
        return self.get_pile().iter_all()

    def iter_displacement_traces(self, tfade, freqlimits, deltat=None):
        for trace in self.iter_raw_traces():
            try:
                if deltat is not None:
                    trace.downsample_to(deltat)
                
                respfile = pjoin(self.tempdir, 'RESP.%s.%s.%s.%s' % trace.nslc_id)

                displacement = trace.make_displacement(respfile, tfade, freqlimits)
                displacement.shift( - self.get_event().time )
                displacement.ydata *= 1.0e09
                
                yield displacement
            
            except pymseed.TraceTooShort:
                logging.warn('trace too short: %s' % trace)
            
            except pymseed.UnavailableDecimation:
                logging.warn('cannot downsample: %s' % trace)
                
    def get_pile(self):
        if self._pile is None:
            self._pile = pymseed.MSeedPile([ pjoin(self.tempdir, 'mini.seed') ] )
        return self._pile
        
    def get_event(self):
        if not self._event:
            self._event = self._get_events_from_file()[0]
        return self._event
        
    def _unpack(self):
        input_fn = self.seedvolume
        output_dir = self.tempdir

        # seismograms:
        rdseed_proc = subprocess.Popen([Programs.rdseed, '-f', input_fn, '-d', '-z', '3', '-o', '4', '-p', '-R', '-q', output_dir], 
                                    stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out,err) = rdseed_proc.communicate()
        logging.info( 'rdseed: '+err )
        
        # event data:
        rdseed_proc = subprocess.Popen([Programs.rdseed, '-f', input_fn, '-e', '-q', output_dir], 
                                    stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out,err) = rdseed_proc.communicate()
        logging.info( 'rdseed: '+err )
        
        # station summary information:
        rdseed_proc = subprocess.Popen([Programs.rdseed, '-f', input_fn, '-S', '-q', output_dir], 
                                    stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out,err) = rdseed_proc.communicate()
        logging.info( 'rdseed: '+err )
        
        # station headers:
        rdseed_proc = subprocess.Popen([Programs.rdseed, '-f', input_fn, '-s', '-q', output_dir], 
                                    stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
        (out,err) = rdseed_proc.communicate()
        fout = open(os.path.join(output_dir,'station_header_infos'),'w')
        fout.write( out )
        fout.close()
        logging.info( 'rdseed: '+err )
        
    def _get_events_from_file( self ):
        rdseed_event_file =  os.path.join(self.tempdir,'rdseed.events')

        f = open(rdseed_event_file, 'r')
        events = []
        for line in f:
            toks = line.split(', ')
            if len(toks) > 4:
                datetime = toks[1].split('.')[0]
                lat = toks[2]
                lon = toks[3]
                format = '%Y/%m/%d %H:%M:%S'
                secs = calendar.timegm( time.strptime(datetime, format))
                e = Event(
                    lat = float(lat),
                    lon = float(lon),
                    time = secs
                )
                events.append(e)
                
        f.close()
        return events


input_filename = 'data.seed'

out_dir = 'out'
clean_dir(out_dir)

sva = SeedVolumeAccess( input_filename)

pymseed.save(sva.iter_displacement_traces(1./0.005, freqlimits=(0.005, 0.01, 1., 2.), deltat=0.5), 
    pjoin(out_dir, '%(network)s.%(station)s.%(location)s.%(channel)s.mseed'))
    
#pymseed.save(sva.iter_raw_traces(), 
#    pjoin(out_dir, 'raw-%(network)s.%(station)s.%(location)s.%(channel)s.mseed'))
    
    
    
    
