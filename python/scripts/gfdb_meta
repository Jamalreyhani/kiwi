#!/usr/bin/env python
# -*- coding: utf8 -*-

import os, sys, shutil, glob
from tunguska import gfdb
from tunguska.gfdb_meta import *
from cStringIO import StringIO

def size(db_path):
    return sum(os.stat(fn).st_size for fn in glob.glob(db_path+'.*'))


def ask(typ, d, dold):
    dout = {}
    for prop in typ.T.properties:
        k = prop.name
        if k in d:
            dout[k] = d[k]
        else:
           
            i = 0
            while True:
                prom = k
                if prop.multivalued:
                    prom += '[%i]' % i

                default = prop.default()
                if k in dold:
                    default = dold[k]

                if prop.multivalued:
                    try:
                        default = default[i]
                    except IndexError:
                        default = None

                if hasattr(prop,'choices'):
                    prom += ' {%s}' % '/'.join(prop.choices)

                if default is not None and default != '':
                    prom += ' (%s)' % default

                prom += ': '

                answer = raw_input(prom)

                if answer != '':
                    if answer == '-':
                        answer = ''

                    if prop.multivalued:
                        if answer:
                            if k not in dout:
                                dout[k] = []

                            dout[k].append(answer)
                    else:
                        dout[k] = answer
                        break

                else:
                    if k in dold:
                        if prop.multivalued:
                            if k not in dout:
                                dout[k] = []

                            if default is not None:
                                dout[k].append(default)
                        else:
                            dout[k] = dold[k]

                    if not prop.multivalued or default is None:
                        break

                i+=1

    return dout

km = 1000.

kB = 1024
MB = 1024**2
GB = 1024**3

if len(sys.argv) != 2:
    sys.exit('usage: gfdb_meta <gfdb-directory>')



db_directory = os.path.abspath(sys.argv[1]).rstrip('/')
db_name = os.path.split(db_directory)[-1]
if not os.path.isdir(db_directory):
    sys.exit('error: no such directory: %s' % db_directory)

db_path = os.path.join(db_directory, 'db')
if not os.path.exists(db_path+'.index'):
    sys.exit("error: the gfdb files must in this case be named 'db.index', 'db.1.chunk'...")

db = gfdb.Gfdb(db_path)


citations = Citation.from_bibtex(stream=StringIO('''
@article{friederich-dalkolmo-1995,
    Author = {Friederich, W. and Dalkolmo, J.},
    Journal = {Geophysical Journal International},
    Number = {2},
    Pages = {537-550},
    Title = {Complete synthetic seismograms for a spherically symmetric earth by a numerical computation of the Green's function in the frequency domain},
    Volume = {122},
    Year = {1995},
}

@article{wang-1999,
    author = {Wang, Rongjiang},
    title = {{A simple orthonormalization method for stable and efficient computation of Green's functions}},
    journal = {Bulletin of the Seismological Society of America},
    volume = {89},
    number = {3},
    pages = {733-741},
    year = {1999},
    URL = {http://www.bssaonline.org/cgi/content/abstract/89/3/733},
    eprint = {http://www.bssaonline.org/cgi/reprint/89/3/733.pdf}
}

@article{kennet-1991,
  title={{IASPEI 1991 seismological tables}},
  author={Kennet, BLN},
  journal={Terra Nova},
  volume={3},
  number={2},
  pages={122},
  year={1991},
  publisher={Wiley Online Library}
}

@article{dziewonski-anderson-1981,
  title={Preliminary reference Earth model},
  author={Dziewonski, A.M. and Anderson, D.L.},
  journal={Physics of the earth and planetary interiors},
  volume={25},
  number={4},
  pages={297--356},
  year={1981},
  publisher={Elsevier}
}

'''))

models = [
        EarthModel(
                id = 'iasp91',
                citation_ids = [ 'kennet-1991', ]
            ),
        EarthModel(
                id = 'prem',
                citation_ids = [ 'dziewonski-anderson-1981', ]
            ),
    ]



bibfilename = os.path.join(db_directory, 'refs.bib')
if os.path.exists(bibfilename):
    citations.extend(Citation.from_bibtex(bibfilename))

modelsfilename = os.path.join(db_directory, 'models.yaml')
if os.path.exists(modelsfilename):
    with open(modelsfilename) as f:
        models.extend(load_all(f))

avail_citation_ids = set( cit.id for cit in citations )

codes = [
        ModellingCode(
                id='qseis-6',
                name = 'QSEIS',
                version = '2006',
                method = 'reflectivity',
                author = 'Rongjiang Wang',
                author_email = 'wang@gfz-potsdam.de',
                citation_ids = [ 'wang-1999' ],
            ),
        ModellingCode(
                id='gemini-2.2',
                name = 'GEMINI',
                version = '2.2',
                method = 'minor integration',
                author = u'JÃ¶rg Dalkolmo, Wolfgang Friederich',
                citation_ids = [ 'friederich-dalkolmo-1995' ],
            )
    ]

meta_fn = os.path.join(db_directory, 'meta.yaml')

dold = {}
if os.path.isfile(meta_fn):
    with open(meta_fn) as f:
        old_inv = load(f)
        if old_inv.gf_sets:
            oldgf = old_inv.gf_sets[0]
            dold = dict((prop.name, val) for (prop, val) in oldgf.T.ipropvals(oldgf))

        for cit in old_inv.citations:
            if cit.id not in avail_citation_ids:
                citations.append(cit)
                avail_citation_ids.add(cit.id)

d = dict(id=db_name,
        sample_rate = 1./db.dt,
        distance_min = db.firstx,
        distance_max = db.firstx + (db.nx - 1) * db.dx,
        distance_delta = db.dx,
        source_depth_min = db.firstz,
        source_depth_max = db.firstz + (db.nz - 1) * db.dz,
        source_depth_delta = db.dz,
        size = size(db_path))

print '-' * 72
print 'available citation ids:\n   %s' % ', '.join(avail_citation_ids)
print 'available modelling code ids:\n   %s' % ', '.join(c.id for c in codes)
print 'available model ids:\n   %s' % ', '.join(c.id for c in models)
print '-' * 72


d = ask(GFSetTypeA, d, dold)

gf = GFSetTypeA(**d)
gf.regularize()


mid = gf.earth_model_id
needed_models = []
if mid is not None:
    if mid not in [ m.id for m in models ]:
        sys.exit('error: missing model: %s' % mid)
    else:
        needed_models.extend([ m for m in models if m.id == mid ])

needed_codes = [ code for code in codes if code.id == gf.modelling_code_id ]
needed_citation_ids = set(gf.citation_ids)
for code in needed_codes:
    needed_citation_ids.update( code.citation_ids )

for mod in needed_models:
    needed_citation_ids.update( mod.citation_ids )

missing = needed_citation_ids - avail_citation_ids
if missing:
    sys.exit('error: missing citations: %s' % ', '.join(missing))

needed_citations = [ cit for cit in citations if cit.id in needed_citation_ids ]

inv = Inventory()
inv.modelling_codes.extend(needed_codes)
inv.citations.extend(needed_citations)
inv.earth_models.extend(needed_models)
inv.gf_sets.append(gf)
inv.regularize()

if os.path.isfile(meta_fn):
    shutil.move(meta_fn, meta_fn+'~')

with open(meta_fn, 'w') as f:
    dump(inv, f)



