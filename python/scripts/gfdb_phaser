#!/usr/bin/env python

#
#     Copyright 2007 Sebastian Heimann
#  
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#  
#         http://www.apache.org/licenses/LICENSE-2.0
#  
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
# 

# A tool wrapping gfdb_redeploy to redeploy a complete database, or to 
# extract particular phases from a database.

import os, sys
from subprocess import Popen, PIPE
from tunguska.phase import Phase
from tunguska.gfdb import Gfdb
from optparse import OptionParser

pjoin = os.path.join


def get_arrivals(phases, distance, depth):
    arrivals = []
    for phase in phases:
        t = phase(distance, depth)
        if t is not None:
            arrivals.append(t)
    return arrivals
        
# argument processing

usage = 'usage: gfdb_phaser in_db_path out_db_path [ --mapping=g1,g2,g3,... ] [ time_begin time_end phase_names ... ]'

parser = OptionParser(usage=usage)
parser.add_option('--mapping', dest='mapping')

options, args = parser.parse_args()

if len(args) < 4 and len(args) != 2:
    parser.print_usage(sys.stderr)
    sys.exit(1)

in_db_path = args[0]
out_db_path = args[1]

if options.mapping:
    mapping = [ int(x) for x in options.mapping.split(',') ]
else:
    mapping = []

cut_mode = False
if len(args) > 2:
    cut_mode = True
    trange = [float(x) for x in args[2:4]]
    phase_names = args[4:]


# create database if it does not exist already

in_db = Gfdb( in_db_path )
if not os.path.isfile( out_db_path + '.index' ):
    cmd = [str(x) for x in ['gfdb_build',   out_db_path, 
                                            in_db.nchunks, 
                                            in_db.nx, 
                                            in_db.nz, 
                                            in_db.ng, 
                                            in_db.dt, 
                                            in_db.dx, 
                                            in_db.dz, 
                                            in_db.firstx, 
                                            in_db.firstz ]]
    p = Popen( cmd, stdin=PIPE )
    p.communicate()
    

if cut_mode:
    phases = [ Phase(phase_name) for phase_name in phase_names]
    beg = Phase('begin')
    end = Phase('end')

out_db = Gfdb( out_db_path )

cmd = [str(x) for x in ['gfdb_redeploy', in_db_path, 1, 1 ] + mapping + [ out_db_path ] ]
p = Popen( cmd, stdin=PIPE )

for ix in xrange(in_db.nx):
    x = in_db.firstx + ix * in_db.dx
    if not (out_db.firstx <= x and x <= out_db.firstx + (out_db.nx-1)*out_db.dx): continue
    
    for iz in xrange(in_db.nz):
        z = in_db.firstz + iz * in_db.dz
        if not (out_db.firstz <= z and z <= out_db.firstz + (out_db.nz-1)*out_db.dz): continue

        sys.stderr.write('distance: %10g km, depth: %10g km\n' % (x/1000., z/1000.))

        if cut_mode:
            arrivals = get_arrivals( phases, x, z )
            (tbeg,) = get_arrivals((beg,), x, z)
            if not arrivals:
                arrivals.append( tbeg )
            twin_begin = min(arrivals)+trange[0]
            twin_end   = max(arrivals)+trange[1]
            p.stdin.write( '%g %g %g %g\n' % ( x, z, twin_begin, twin_end ) )
            
        else:
            p.stdin.write( '%g %g\n' % ( x, z ) )
        
        p.stdin.flush()

p.stdin.close()
p.wait()
if p.returncode != 0:
    sys.exit('gfdb_phaser: gfdb_redeploy returned an error')

